"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const camelcase_1 = __importDefault(require("camelcase"));
const pluralize_1 = __importDefault(require("pluralize"));
const GraphElement_1 = require("./GraphElement");
const upper_first_1 = require("../utils/upper-first");
class Node extends GraphElement_1.GraphElement {
    constructor(input) {
        super(input);
        this.relationFields = input.relationFields;
        this.connectionFields = input.connectionFields;
        this.cypherFields = input.cypherFields;
        this.otherDirectives = input.otherDirectives;
        this.unionFields = input.unionFields;
        this.interfaceFields = input.interfaceFields;
        this.interfaces = input.interfaces;
        this.objectFields = input.objectFields;
        this.exclude = input.exclude;
        this.nodeDirective = input.nodeDirective;
        this.fulltextDirective = input.fulltextDirective;
        this.auth = input.auth;
        this.queryOptions = input.queryOptionsDirective;
        this.plural = this.generatePlural();
    }
    generatePlural() {
        var _a, _b;
        const name = ((_a = this.nodeDirective) === null || _a === void 0 ? void 0 : _a.plural) || this.name;
        const re = /^(_+).+/;
        const match = re.exec(name);
        const leadingUnderscores = (match === null || match === void 0 ? void 0 : match[1]) || "";
        const plural = ((_b = this.nodeDirective) === null || _b === void 0 ? void 0 : _b.plural) ? (0, camelcase_1.default)(name) : (0, pluralize_1.default)((0, camelcase_1.default)(name));
        return `${leadingUnderscores}${plural}`;
    }
    // Fields you can set in a create or update mutation
    get mutableFields() {
        return [
            ...this.temporalFields,
            ...this.enumFields,
            ...this.objectFields,
            ...this.scalarFields,
            ...this.primitiveFields,
            ...this.interfaceFields,
            ...this.objectFields,
            ...this.unionFields,
            ...this.pointFields,
        ];
    }
    /** Fields you can apply auth allow and bind to */
    get authableFields() {
        return [
            ...this.primitiveFields,
            ...this.scalarFields,
            ...this.enumFields,
            ...this.unionFields,
            ...this.objectFields,
            ...this.temporalFields,
            ...this.pointFields,
            ...this.cypherFields,
        ];
    }
    get constrainableFields() {
        return [...this.primitiveFields, ...this.temporalFields, ...this.pointFields];
    }
    get uniqueFields() {
        return this.constrainableFields.filter((field) => field.unique);
    }
    get pascalCasePlural() {
        return (0, upper_first_1.upperFirst)(this.plural);
    }
    get rootTypeFieldNames() {
        const pascalCasePlural = this.pascalCasePlural;
        return {
            create: `create${pascalCasePlural}`,
            read: this.plural,
            update: `update${pascalCasePlural}`,
            delete: `delete${pascalCasePlural}`,
            aggregate: `${this.plural}Aggregate`,
        };
    }
    get mutationResponseTypeNames() {
        const pascalCasePlural = this.pascalCasePlural;
        return {
            create: `Create${pascalCasePlural}MutationResponse`,
            update: `Update${pascalCasePlural}MutationResponse`,
        };
    }
    getLabelString(context) {
        var _a;
        return ((_a = this.nodeDirective) === null || _a === void 0 ? void 0 : _a.getLabelsString(this.name, context)) || `:${this.name}`;
    }
    getLabels(context) {
        var _a;
        return ((_a = this.nodeDirective) === null || _a === void 0 ? void 0 : _a.getLabels(this.name, context)) || [this.name];
    }
    getMainLabel() {
        var _a;
        return ((_a = this.nodeDirective) === null || _a === void 0 ? void 0 : _a.label) || this.name;
    }
}
exports.default = Node;
//# sourceMappingURL=Node.js.map