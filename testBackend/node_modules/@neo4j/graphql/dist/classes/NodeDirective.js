"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeDirective = void 0;
const Error_1 = require("./Error");
const context_parser_1 = __importDefault(require("../utils/context-parser"));
class NodeDirective {
    constructor(input) {
        this.label = input.label;
        this.additionalLabels = input.additionalLabels || [];
        this.plural = input.plural;
    }
    getLabelsString(typeName, context) {
        if (!typeName) {
            throw new Error_1.Neo4jGraphQLError("Could not generate label string in @node directive due to empty typeName");
        }
        const labels = this.getLabels(typeName, context).map((l) => this.escapeLabel(l));
        return `:${labels.join(":")}`;
    }
    getLabels(typeName, context) {
        const mainLabel = this.label || typeName;
        const labels = [mainLabel, ...this.additionalLabels];
        return this.mapLabelsWithContext(labels, context);
    }
    mapLabelsWithContext(labels, context) {
        return labels.map((label) => {
            const jwtPath = context_parser_1.default.parseTag(label, "jwt");
            let ctxPath = context_parser_1.default.parseTag(label, "context");
            if (jwtPath)
                ctxPath = `jwt.${jwtPath}`;
            if (ctxPath) {
                const mappedLabel = context_parser_1.default.getProperty(ctxPath, context);
                if (!mappedLabel)
                    throw new Error(`Type value required.`);
                return mappedLabel;
            }
            return label;
        });
    }
    escapeLabel(label) {
        const escapedLabel = label.replace(/`/g, "``");
        return `\`${escapedLabel}\``;
    }
}
exports.NodeDirective = NodeDirective;
//# sourceMappingURL=NodeDirective.js.map