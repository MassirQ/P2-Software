/// <reference types="node" />
import { Driver } from "neo4j-driver";
import { GraphQLSchema } from "graphql";
import { IExecutableSchemaDefinition } from "@graphql-tools/schema";
import type { DriverConfig, CypherQueryOptions, Neo4jGraphQLPlugins } from "../types";
import Node from "./Node";
import Relationship from "./Relationship";
import { AssertIndexesAndConstraintsOptions } from "./utils/asserts-indexes-and-constraints";
export interface Neo4jGraphQLJWT {
    jwksEndpoint?: string;
    secret?: string | Buffer | {
        key: string | Buffer;
        passphrase: string;
    };
    noVerify?: boolean;
    rolesPath?: string;
}
export interface Neo4jGraphQLConfig {
    driverConfig?: DriverConfig;
    enableRegex?: boolean;
    skipValidateTypeDefs?: boolean;
    queryOptions?: CypherQueryOptions;
}
export interface Neo4jGraphQLConstructor extends IExecutableSchemaDefinition {
    config?: Neo4jGraphQLConfig;
    driver?: Driver;
    plugins?: Neo4jGraphQLPlugins;
}
declare class Neo4jGraphQL {
    private config;
    private driver?;
    private schemaDefinition;
    private _nodes?;
    private _relationships?;
    private plugins?;
    private schema?;
    constructor(input: Neo4jGraphQLConstructor);
    get nodes(): Node[];
    get relationships(): Relationship[];
    getSchema(): Promise<GraphQLSchema>;
    checkNeo4jCompat(input?: {
        driver?: Driver;
        driverConfig?: DriverConfig;
    }): Promise<void>;
    assertIndexesAndConstraints(input?: {
        driver?: Driver;
        driverConfig?: DriverConfig;
        options?: AssertIndexesAndConstraintsOptions;
    }): Promise<void>;
    private addDefaultFieldResolvers;
    private wrapResolvers;
    private addWrappedResolversToSchema;
    private generateSchema;
}
export default Neo4jGraphQL;
//# sourceMappingURL=Neo4jGraphQL.d.ts.map