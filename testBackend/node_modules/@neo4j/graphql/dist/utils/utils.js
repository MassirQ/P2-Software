"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.delay = exports.removeDuplicates = exports.haveSharedElement = exports.filterTruthy = exports.asArray = exports.joinStrings = exports.isNeoInt = exports.isString = void 0;
const neo4j_driver_1 = require("neo4j-driver");
/** Checks if value is string */
function isString(value) {
    return typeof value === "string" || value instanceof String;
}
exports.isString = isString;
/** Checks if value is a Neo4j int object */
function isNeoInt(value) {
    return (0, neo4j_driver_1.isInt)(value);
}
exports.isNeoInt = isNeoInt;
/** Joins all strings with given separator, ignoring empty or undefined statements */
function joinStrings(statements, separator = "\n") {
    return filterTruthy(asArray(statements)).join(separator);
}
exports.joinStrings = joinStrings;
/** Makes sure input is an array, if not it turns into an array (empty array if input is null or undefined) */
function asArray(raw) {
    if (Array.isArray(raw))
        return raw;
    if (raw === undefined || raw === null)
        return [];
    return [raw];
}
exports.asArray = asArray;
function filterTruthy(arr) {
    return arr.filter(Boolean);
}
exports.filterTruthy = filterTruthy;
/** Check if both arrays share at least one element */
function haveSharedElement(arr1, arr2) {
    for (const element of arr1) {
        if (arr2.includes(element))
            return true;
    }
    return false;
}
exports.haveSharedElement = haveSharedElement;
/** Removes duplicate elements of an array */
function removeDuplicates(arr) {
    return Array.from(new Set(arr));
}
exports.removeDuplicates = removeDuplicates;
/** Awaitable version of setTimeout */
function delay(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
exports.delay = delay;
//# sourceMappingURL=utils.js.map