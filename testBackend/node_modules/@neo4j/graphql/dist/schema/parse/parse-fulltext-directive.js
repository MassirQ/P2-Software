"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const parse_value_node_1 = __importDefault(require("../parse-value-node"));
function parseFulltextDirective({ directive, nodeFields, definition, }) {
    var _a;
    const indexesArg = (_a = directive.arguments) === null || _a === void 0 ? void 0 : _a.find((arg) => arg.name.value === "indexes");
    const value = (0, parse_value_node_1.default)(indexesArg.value);
    const stringFields = nodeFields.primitiveFields.filter((f) => f.typeMeta.name === "String" && !f.typeMeta.array);
    value.forEach((index) => {
        const names = value.filter((i) => index.name === i.name);
        if (names.length > 1) {
            throw new Error(`Node '${definition.name.value}' @fulltext index contains duplicate name '${index.name}'`);
        }
        index.fields.forEach((field) => {
            const foundField = stringFields.find((f) => f.fieldName === field);
            if (!foundField) {
                throw new Error(`Node '${definition.name.value}' @fulltext index contains invalid index '${index.name}' cannot use find String field '${field}'`);
            }
        });
    });
    return { indexes: value };
}
exports.default = parseFulltextDirective;
//# sourceMappingURL=parse-fulltext-directive.js.map