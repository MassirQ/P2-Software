"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const NodeDirective_1 = require("../classes/NodeDirective");
function parseNodeDirective(nodeDirective) {
    if (!nodeDirective || nodeDirective.name.value !== "node") {
        throw new Error("Undefined or incorrect directive passed into parseNodeDirective function");
    }
    return new NodeDirective_1.NodeDirective({
        label: getArgumentValue(nodeDirective, "label"),
        additionalLabels: getArgumentValue(nodeDirective, "additionalLabels"),
        plural: getArgumentValue(nodeDirective, "plural"),
    });
}
function getArgumentValue(directive, name) {
    var _a;
    const argument = (_a = directive.arguments) === null || _a === void 0 ? void 0 : _a.find((a) => a.name.value === name);
    return argument ? (0, graphql_1.valueFromASTUntyped)(argument.value) : undefined;
}
exports.default = parseNodeDirective;
//# sourceMappingURL=parse-node-directive.js.map