"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const utils_1 = require("../../utils");
const to_compose_1 = require("../to-compose");
const create_auth_and_params_1 = __importDefault(require("../../translate/create-auth-and-params"));
const create_auth_param_1 = __importDefault(require("../../translate/create-auth-param"));
const constants_1 = require("../../constants");
const create_projection_and_params_1 = __importDefault(require("../../translate/create-projection-and-params"));
const create_connection_and_params_1 = __importDefault(require("../../translate/connection/create-connection-and-params"));
const utils_2 = require("../../utils/utils");
const get_neo4j_resolve_tree_1 = __importDefault(require("../../utils/get-neo4j-resolve-tree"));
function cypherResolver({ field, statement, type, }) {
    async function resolve(_root, args, _context, info) {
        var _a, _b, _c, _d, _e;
        const context = _context;
        context.resolveTree = (0, get_neo4j_resolve_tree_1.default)(info);
        const { resolveTree } = context;
        const cypherStrs = [];
        const connectionProjectionStrs = [];
        let projectionStr = "";
        const unionWhere = [];
        const projectionAuthStrs = [];
        let params = { ...args, auth: (0, create_auth_param_1.default)({ context }), cypherParams: context.cypherParams };
        const isArray = field.typeMeta.array;
        const graphqlType = context.schema.getType(field.typeMeta.name);
        const preAuth = (0, create_auth_and_params_1.default)({ entity: field, context });
        if (preAuth[0]) {
            params = { ...params, ...preAuth[1] };
            cypherStrs.push(`CALL apoc.util.validate(NOT(${preAuth[0]}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`);
        }
        const referenceNode = context.nodes.find((x) => x.name === field.typeMeta.name);
        const referenceUnion = graphqlType instanceof graphql_1.GraphQLUnionType ? graphqlType.astNode : undefined;
        if (referenceNode) {
            const recurse = (0, create_projection_and_params_1.default)({
                resolveTree,
                node: referenceNode,
                context,
                varName: `this`,
            });
            const [str, p, meta] = recurse;
            projectionStr = str;
            params = { ...params, ...p };
            if ((_a = meta === null || meta === void 0 ? void 0 : meta.authValidateStrs) === null || _a === void 0 ? void 0 : _a.length) {
                projectionAuthStrs.push(...projectionAuthStrs, meta.authValidateStrs.join(" AND "));
            }
            if ((_b = meta === null || meta === void 0 ? void 0 : meta.connectionFields) === null || _b === void 0 ? void 0 : _b.length) {
                meta.connectionFields.forEach((connectionResolveTree) => {
                    const connectionField = referenceNode.connectionFields.find((x) => x.fieldName === connectionResolveTree.name);
                    const nestedConnection = (0, create_connection_and_params_1.default)({
                        resolveTree: connectionResolveTree,
                        field: connectionField,
                        context,
                        nodeVariable: "this",
                    });
                    const [nestedStr, nestedP] = nestedConnection;
                    connectionProjectionStrs.push(nestedStr);
                    params = { ...params, ...nestedP };
                });
            }
        }
        if (referenceUnion) {
            const headStrs = [];
            const referencedNodes = ((_e = (_d = (_c = referenceUnion === null || referenceUnion === void 0 ? void 0 : referenceUnion.types) === null || _c === void 0 ? void 0 : _c.map((u) => context.nodes.find((n) => n.name === u.name.value))) === null || _d === void 0 ? void 0 : _d.filter((b) => b !== undefined)) === null || _e === void 0 ? void 0 : _e.filter((n) => { var _a; return Object.keys(resolveTree.fieldsByTypeName).includes((_a = n === null || n === void 0 ? void 0 : n.name) !== null && _a !== void 0 ? _a : ""); })) || [];
            referencedNodes.forEach((node) => {
                var _a;
                if (node) {
                    const labelsStatements = node.getLabels(context).map((label) => `"${label}" IN labels(this)`);
                    unionWhere.push(`(${labelsStatements.join("AND")})`);
                    const innerHeadStr = [`[ this IN [this] WHERE (${labelsStatements.join(" AND ")})`];
                    if (resolveTree.fieldsByTypeName[node.name]) {
                        const [str, p, meta] = (0, create_projection_and_params_1.default)({
                            resolveTree,
                            node,
                            context,
                            varName: "this",
                        });
                        innerHeadStr.push([`| this { __resolveType: "${node.name}", `, ...str.replace("{", "").split("")].join(""));
                        params = { ...params, ...p };
                        if ((_a = meta === null || meta === void 0 ? void 0 : meta.authValidateStrs) === null || _a === void 0 ? void 0 : _a.length) {
                            projectionAuthStrs.push(meta.authValidateStrs.join(" AND "));
                        }
                    }
                    else {
                        innerHeadStr.push(`| this { __resolveType: "${node.name}" } `);
                    }
                    innerHeadStr.push(`]`);
                    headStrs.push(innerHeadStr.join(" "));
                }
            });
            projectionStr = `${headStrs.join(" + ")}`;
        }
        const initApocParamsStrs = ["auth: $auth", ...(context.cypherParams ? ["cypherParams: $cypherParams"] : [])];
        // Null default argument values are not passed into the resolve tree therefore these are not being passed to
        // `apocParams` below causing a runtime error when executing.
        const nullArgumentValues = field.arguments.reduce((res, argument) => ({
            ...res,
            ...{ [argument.name.value]: null },
        }), {});
        const apocParams = Object.entries({ ...nullArgumentValues, ...resolveTree.args }).reduce((r, entry) => ({
            strs: [...r.strs, `${entry[0]}: $${entry[0]}`],
            params: { ...r.params, [entry[0]]: entry[1] },
        }), { strs: initApocParamsStrs, params });
        params = { ...params, ...apocParams.params };
        const apocParamsStr = `{${apocParams.strs.length ? `${apocParams.strs.join(", ")}` : ""}}`;
        const expectMultipleValues = !field.isScalar && !field.isEnum && isArray ? "true" : "false";
        if (type === "Query") {
            cypherStrs.push(`
                WITH apoc.cypher.runFirstColumn("${statement}", ${apocParamsStr}, ${expectMultipleValues}) as x
                UNWIND x as this
                WITH this
            `);
        }
        else {
            cypherStrs.push(`
                CALL apoc.cypher.doIt("${statement}", ${apocParamsStr}) YIELD value
                WITH apoc.map.values(value, [keys(value)[0]])[0] AS this
            `);
        }
        if (unionWhere.length) {
            cypherStrs.push(`WHERE ${unionWhere.join(" OR ")}`);
        }
        if (projectionAuthStrs.length) {
            cypherStrs.push(`WHERE apoc.util.validatePredicate(NOT(${projectionAuthStrs.join(" AND ")}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`);
        }
        cypherStrs.push(connectionProjectionStrs.join("\n"));
        if (field.isScalar || field.isEnum) {
            cypherStrs.push(`RETURN this`);
        }
        else if (referenceUnion) {
            cypherStrs.push(`RETURN head( ${projectionStr} ) AS this`);
        }
        else {
            cypherStrs.push(`RETURN this ${projectionStr} AS this`);
        }
        const executeResult = await (0, utils_1.execute)({
            cypher: cypherStrs.join("\n"),
            params,
            defaultAccessMode: "WRITE",
            context,
        });
        const values = executeResult.result.records.map((record) => {
            const value = record.get(0);
            if (["number", "string", "boolean"].includes(typeof value)) {
                return value;
            }
            if (!value) {
                return undefined;
            }
            if ((0, utils_2.isNeoInt)(value)) {
                return Number(value);
            }
            if (value.identity && value.labels && value.properties) {
                return value.properties;
            }
            return value;
        });
        if (!field.typeMeta.array) {
            return values[0];
        }
        return values;
    }
    return {
        type: field.typeMeta.pretty,
        resolve,
        args: (0, to_compose_1.graphqlArgsToCompose)(field.arguments),
    };
}
exports.default = cypherResolver;
//# sourceMappingURL=cypher.js.map