"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapResolver = void 0;
const debug_1 = __importDefault(require("debug"));
const graphql_1 = require("graphql");
const classes_1 = require("../../classes");
const constants_1 = require("../../constants");
const create_auth_param_1 = __importDefault(require("../../translate/create-auth-param"));
const get_token_1 = require("../../utils/get-token");
const debug = (0, debug_1.default)(constants_1.DEBUG_GRAPHQL);
const wrapResolver = ({ driver, config, nodes, relationships, schema, plugins, }) => (next) => async (root, args, context, info) => {
    var _a;
    const { driverConfig } = config;
    if (debug.enabled) {
        const query = (0, graphql_1.print)(info.operation);
        debug("%s", `Incoming GraphQL:\nQuery:\n${query}\nVariables:\n${JSON.stringify(info.variableValues, null, 2)}`);
    }
    if (!(context === null || context === void 0 ? void 0 : context.driver)) {
        if (!driver) {
            throw new Error("A Neo4j driver instance must either be passed to Neo4jGraphQL on construction, or passed as context.driver in each request.");
        }
        context.driver = driver;
    }
    if (!(context === null || context === void 0 ? void 0 : context.driverConfig)) {
        context.driverConfig = driverConfig;
    }
    context.nodes = nodes;
    context.relationships = relationships;
    context.schema = schema;
    context.plugins = plugins;
    if (!context.jwt) {
        if ((_a = context.plugins) === null || _a === void 0 ? void 0 : _a.auth) {
            const token = (0, get_token_1.getToken)(context);
            if (token) {
                const jwt = await context.plugins.auth.decode(token);
                if (typeof jwt === "string") {
                    throw new classes_1.Neo4jGraphQLAuthenticationError("JWT payload cannot be a string");
                }
                context.jwt = jwt;
            }
        }
    }
    context.auth = (0, create_auth_param_1.default)({ context });
    context.queryOptions = config.queryOptions;
    return next(root, args, context, info);
};
exports.wrapResolver = wrapResolver;
//# sourceMappingURL=wrapper.js.map