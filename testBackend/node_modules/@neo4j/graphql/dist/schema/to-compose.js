"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.objectFieldsToUpdateInputFields = exports.objectFieldsToCreateInputFields = exports.objectFieldsToComposeFields = exports.graphqlDirectivesToCompose = exports.graphqlArgsToCompose = void 0;
const get_field_type_meta_1 = __importDefault(require("./get-field-type-meta"));
const parse_value_node_1 = __importDefault(require("./parse-value-node"));
const resolvers_1 = require("./resolvers");
function graphqlArgsToCompose(args) {
    return args.reduce((res, arg) => {
        const meta = (0, get_field_type_meta_1.default)(arg.type);
        return {
            ...res,
            [arg.name.value]: {
                type: meta.pretty,
                description: arg.description,
                ...(arg.defaultValue ? { defaultValue: (0, parse_value_node_1.default)(arg.defaultValue) } : {}),
            },
        };
    }, {});
}
exports.graphqlArgsToCompose = graphqlArgsToCompose;
function graphqlDirectivesToCompose(directives) {
    return directives.map((directive) => {
        var _a;
        return ({
            args: (_a = (directive.arguments || [])) === null || _a === void 0 ? void 0 : _a.reduce((r, d) => ({ ...r, [d.name.value]: (0, parse_value_node_1.default)(d.value) }), {}),
            name: directive.name.value,
        });
    });
}
exports.graphqlDirectivesToCompose = graphqlDirectivesToCompose;
function objectFieldsToComposeFields(fields) {
    return fields.reduce((res, field) => {
        if (field.writeonly) {
            return res;
        }
        const newField = {
            type: field.typeMeta.pretty,
            args: {},
            description: field.description,
        };
        if (field.otherDirectives.length) {
            newField.directives = graphqlDirectivesToCompose(field.otherDirectives);
        }
        if (["Int", "Float"].includes(field.typeMeta.name)) {
            newField.resolve = resolvers_1.numericalResolver;
        }
        if (field.typeMeta.name === "ID") {
            newField.resolve = resolvers_1.idResolver;
        }
        if (field.arguments) {
            newField.args = graphqlArgsToCompose(field.arguments);
        }
        return { ...res, [field.fieldName]: newField };
    }, {});
}
exports.objectFieldsToComposeFields = objectFieldsToComposeFields;
function objectFieldsToCreateInputFields(fields, optional = false) {
    return fields.reduce((res, f) => {
        var _a;
        let fieldType = f.typeMeta.input.create.pretty;
        if (optional) {
            fieldType = f.typeMeta.input.create.type;
        }
        const defaultValue = (_a = f) === null || _a === void 0 ? void 0 : _a.defaultValue;
        if (defaultValue !== undefined) {
            res[f.fieldName] = {
                type: fieldType,
                defaultValue,
            };
        }
        else {
            res[f.fieldName] = fieldType;
        }
        return res;
    }, {});
}
exports.objectFieldsToCreateInputFields = objectFieldsToCreateInputFields;
function objectFieldsToUpdateInputFields(fields) {
    return fields.reduce((res, f) => {
        var _a;
        const staticField = f.readonly || ((_a = f) === null || _a === void 0 ? void 0 : _a.autogenerate);
        if (staticField) {
            return res;
        }
        const fieldType = f.typeMeta.input.update.pretty;
        res[f.fieldName] = fieldType;
        return res;
    }, {});
}
exports.objectFieldsToUpdateInputFields = objectFieldsToUpdateInputFields;
//# sourceMappingURL=to-compose.js.map