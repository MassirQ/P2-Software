"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const pluralize_1 = __importDefault(require("pluralize"));
const scalars = __importStar(require("../scalars"));
const enums = __importStar(require("./enums"));
const directives = __importStar(require("./directives"));
const point = __importStar(require("../point"));
const constants_1 = require("../../constants");
function filterDocument(document) {
    const nodeNames = document.definitions
        .filter((definition) => {
        if (definition.kind === "ObjectTypeDefinition" ||
            definition.kind === "ScalarTypeDefinition" ||
            definition.kind === "InterfaceTypeDefinition" ||
            definition.kind === "UnionTypeDefinition" ||
            definition.kind === "EnumTypeDefinition" ||
            definition.kind === "InputObjectTypeDefinition") {
            constants_1.RESERVED_TYPE_NAMES.forEach((reservedName) => {
                if (reservedName.regex.test(definition.name.value)) {
                    throw new Error(reservedName.error);
                }
            });
        }
        if (definition.kind === "ObjectTypeDefinition") {
            if (!["Query", "Mutation", "Subscription"].includes(definition.name.value)) {
                return true;
            }
        }
        return false;
    })
        .map((definition) => definition.name.value);
    const getArgumentType = (type) => {
        if (type.kind === graphql_1.Kind.LIST_TYPE) {
            return getArgumentType(type.type);
        }
        if (type.kind === graphql_1.Kind.NON_NULL_TYPE) {
            return getArgumentType(type.type);
        }
        return type.name.value;
    };
    const filterInputTypes = (fields) => {
        return fields === null || fields === void 0 ? void 0 : fields.filter((f) => {
            var _a;
            const type = getArgumentType(f.type);
            const nodeMatch = /(?<nodeName>.+)(?:ConnectInput|ConnectWhere|CreateInput|DeleteInput|DisconnectInput|Options|RelationInput|Sort|UpdateInput|Where)/gm.exec(type);
            if ((_a = nodeMatch === null || nodeMatch === void 0 ? void 0 : nodeMatch.groups) === null || _a === void 0 ? void 0 : _a.nodeName) {
                if (nodeNames.includes(nodeMatch.groups.nodeName)) {
                    return false;
                }
            }
            return true;
        });
    };
    const filterFields = (fields) => {
        return fields === null || fields === void 0 ? void 0 : fields.filter((f) => {
            var _a;
            const type = getArgumentType(f.type);
            const match = /(?:Create|Update)(?<nodeName>.+)MutationResponse/gm.exec(type);
            if ((_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.nodeName) {
                if (nodeNames.map((nodeName) => (0, pluralize_1.default)(nodeName)).includes(match.groups.nodeName)) {
                    return false;
                }
            }
            return true;
        }).map((f) => {
            var _a;
            return ({
                ...f,
                arguments: filterInputTypes(f.arguments),
                directives: (_a = f.directives) === null || _a === void 0 ? void 0 : _a.filter((x) => !["auth"].includes(x.name.value)),
            });
        });
    };
    return {
        ...document,
        definitions: document.definitions.reduce((res, def) => {
            var _a;
            if (def.kind === "InputObjectTypeDefinition") {
                const fields = filterInputTypes(def.fields);
                if (!(fields === null || fields === void 0 ? void 0 : fields.length)) {
                    return res;
                }
                return [
                    ...res,
                    {
                        ...def,
                        fields,
                    },
                ];
            }
            if (def.kind === "ObjectTypeDefinition" || def.kind === "InterfaceTypeDefinition") {
                const fields = filterFields(def.fields);
                if (!(fields === null || fields === void 0 ? void 0 : fields.length)) {
                    return res;
                }
                return [
                    ...res,
                    {
                        ...def,
                        directives: (_a = def.directives) === null || _a === void 0 ? void 0 : _a.filter((x) => !["auth"].includes(x.name.value)),
                        fields,
                    },
                ];
            }
            return [...res, def];
        }, []),
    };
}
function validateDocument(document) {
    const doc = filterDocument(document);
    const schemaToExtend = new graphql_1.GraphQLSchema({
        directives: [...Object.values(directives), ...graphql_1.specifiedDirectives],
        types: [...Object.values(scalars), ...Object.values(enums), ...Object.values(point)],
    });
    const schema = (0, graphql_1.extendSchema)(schemaToExtend, doc);
    const errors = (0, graphql_1.validateSchema)(schema);
    const filteredErrors = errors.filter((e) => e.message !== "Query root type must be provided.");
    if (filteredErrors.length) {
        throw new Error(filteredErrors.join("\n"));
    }
}
exports.default = validateDocument;
//# sourceMappingURL=validate-document.js.map