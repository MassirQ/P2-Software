"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_projection_and_params_1 = __importDefault(require("./create-projection-and-params"));
const create_auth_and_params_1 = __importDefault(require("./create-auth-and-params"));
const constants_1 = require("../constants");
const create_connection_and_params_1 = __importDefault(require("./connection/create-connection-and-params"));
const create_interface_projection_and_params_1 = __importDefault(require("./create-interface-projection-and-params"));
const translate_top_level_match_1 = __importDefault(require("./translate-top-level-match"));
function translateRead({ node, context }) {
    var _a, _b, _c, _d, _e, _f;
    const { resolveTree } = context;
    const varName = "this";
    let matchAndWhereStr = "";
    let authStr = "";
    let projAuth = "";
    let projStr = "";
    const optionsInput = (resolveTree.args.options || {});
    let limitStr = "";
    let offsetStr = "";
    let sortStr = "";
    let cypherParams = {};
    const connectionStrs = [];
    const interfaceStrs = [];
    if (node.queryOptions) {
        optionsInput.limit = node.queryOptions.getLimit(optionsInput.limit);
    }
    const topLevelMatch = (0, translate_top_level_match_1.default)({ node, context, varName, operation: "READ" });
    matchAndWhereStr = topLevelMatch[0];
    cypherParams = { ...cypherParams, ...topLevelMatch[1] };
    const projection = (0, create_projection_and_params_1.default)({
        node,
        context,
        resolveTree,
        varName,
    });
    [projStr] = projection;
    cypherParams = { ...cypherParams, ...projection[1] };
    if ((_b = (_a = projection[2]) === null || _a === void 0 ? void 0 : _a.authValidateStrs) === null || _b === void 0 ? void 0 : _b.length) {
        projAuth = `CALL apoc.util.validate(NOT(${projection[2].authValidateStrs.join(" AND ")}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`;
    }
    if ((_d = (_c = projection[2]) === null || _c === void 0 ? void 0 : _c.connectionFields) === null || _d === void 0 ? void 0 : _d.length) {
        projection[2].connectionFields.forEach((connectionResolveTree) => {
            const connectionField = node.connectionFields.find((x) => x.fieldName === connectionResolveTree.name);
            const connection = (0, create_connection_and_params_1.default)({
                resolveTree: connectionResolveTree,
                field: connectionField,
                context,
                nodeVariable: varName,
            });
            connectionStrs.push(connection[0]);
            cypherParams = { ...cypherParams, ...connection[1] };
        });
    }
    if ((_f = (_e = projection[2]) === null || _e === void 0 ? void 0 : _e.interfaceFields) === null || _f === void 0 ? void 0 : _f.length) {
        projection[2].interfaceFields.forEach((interfaceResolveTree) => {
            const relationshipField = node.relationFields.find((x) => x.fieldName === interfaceResolveTree.name);
            const interfaceProjection = (0, create_interface_projection_and_params_1.default)({
                resolveTree: interfaceResolveTree,
                field: relationshipField,
                context,
                node,
                nodeVariable: varName,
            });
            interfaceStrs.push(interfaceProjection.cypher);
            cypherParams = { ...cypherParams, ...interfaceProjection.params };
        });
    }
    const allowAndParams = (0, create_auth_and_params_1.default)({
        operations: "READ",
        entity: node,
        context,
        allow: {
            parentNode: node,
            varName,
        },
    });
    if (allowAndParams[0]) {
        cypherParams = { ...cypherParams, ...allowAndParams[1] };
        authStr = `CALL apoc.util.validate(NOT(${allowAndParams[0]}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`;
    }
    if (optionsInput) {
        const hasOffset = Boolean(optionsInput.offset) || optionsInput.offset === 0;
        if (hasOffset) {
            offsetStr = `SKIP $${varName}_offset`;
            cypherParams[`${varName}_offset`] = optionsInput.offset;
        }
        if (optionsInput.limit) {
            limitStr = `LIMIT $${varName}_limit`;
            cypherParams[`${varName}_limit`] = optionsInput.limit;
        }
        if (optionsInput.sort && optionsInput.sort.length) {
            const sortArr = optionsInput.sort.reduce((res, sort) => {
                return [
                    ...res,
                    ...Object.entries(sort).map(([field, direction]) => {
                        return `${varName}.${field} ${direction}`;
                    }),
                ];
            }, []);
            sortStr = `ORDER BY ${sortArr.join(", ")}`;
        }
    }
    const cypher = [
        matchAndWhereStr,
        authStr,
        ...(projAuth ? [`WITH ${varName}`, projAuth] : []),
        ...connectionStrs,
        ...interfaceStrs,
        `RETURN ${varName} ${projStr} as ${varName}`,
        ...(sortStr ? [sortStr] : []),
        offsetStr,
        limitStr,
    ];
    return [cypher.filter(Boolean).join("\n"), cypherParams];
}
exports.default = translateRead;
//# sourceMappingURL=translate-read.js.map