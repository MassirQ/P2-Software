"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.countQuery = exports.dateTimeAggregationQuery = exports.defaultAggregationQuery = exports.numberAggregationQuery = exports.stringAggregationQuery = exports.createMatchWherePattern = void 0;
const create_datetime_element_1 = require("../projection/elements/create-datetime-element");
const stringify_object_1 = require("../utils/stringify-object");
function createMatchWherePattern(matchPattern, auth, whereInput) {
    const whereQuery = whereInput || auth.whereQuery ? "WHERE" : "";
    const andQuery = whereInput && auth.whereQuery ? "AND" : "";
    return `MATCH ${matchPattern} ${whereQuery} ${whereInput} ${andQuery} ${auth.whereQuery} ${auth.query}`;
}
exports.createMatchWherePattern = createMatchWherePattern;
function stringAggregationQuery(matchWherePattern, fieldName, targetAlias) {
    const fieldPath = `${targetAlias}.${fieldName}`;
    return `${matchWherePattern}
        WITH ${targetAlias} as ${targetAlias}
        ORDER BY size(${fieldPath}) DESC
        WITH collect(${fieldPath}) as list
        RETURN {longest: head(list), shortest: last(list)}`;
}
exports.stringAggregationQuery = stringAggregationQuery;
function numberAggregationQuery(matchWherePattern, fieldName, targetAlias) {
    const fieldPath = `${targetAlias}.${fieldName}`;
    return `${matchWherePattern}
        RETURN {min: min(${fieldPath}), max: max(${fieldPath}), average: avg(${fieldPath}), sum: sum(${fieldPath})}`;
}
exports.numberAggregationQuery = numberAggregationQuery;
function defaultAggregationQuery(matchWherePattern, fieldName, targetAlias) {
    const fieldPath = `${targetAlias}.${fieldName}`;
    return `${matchWherePattern}
        RETURN {min: min(${fieldPath}), max: max(${fieldPath})}`;
}
exports.defaultAggregationQuery = defaultAggregationQuery;
function dateTimeAggregationQuery(matchWherePattern, fieldName, targetAlias) {
    const fieldPath = `${targetAlias}.${fieldName}`;
    return `${matchWherePattern}
        RETURN ${(0, stringify_object_1.stringifyObject)({
        min: (0, create_datetime_element_1.wrapApocConvertDate)(`min(${fieldPath})`),
        max: (0, create_datetime_element_1.wrapApocConvertDate)(`max(${fieldPath})`),
    })}`;
}
exports.dateTimeAggregationQuery = dateTimeAggregationQuery;
function countQuery(matchWherePattern, targetAlias) {
    return `${matchWherePattern} RETURN COUNT(${targetAlias})`;
}
exports.countQuery = countQuery;
//# sourceMappingURL=aggregation-sub-queries.js.map