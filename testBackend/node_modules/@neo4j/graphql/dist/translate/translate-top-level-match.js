"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_compose_1 = require("graphql-compose");
const create_auth_and_params_1 = __importDefault(require("./create-auth-and-params"));
const create_where_and_params_1 = __importDefault(require("./where/create-where-and-params"));
function translateTopLevelMatch({ node, context, varName, operation, }) {
    var _a, _b;
    const cyphers = [];
    let cypherParams = {};
    const { resolveTree } = context;
    const whereInput = resolveTree.args.where;
    const fulltextInput = (resolveTree.args.fulltext || {});
    const whereStrs = [];
    if (!Object.entries(fulltextInput).length) {
        cyphers.push(`MATCH (${varName}${node.getLabelString(context)})`);
    }
    else {
        if (Object.entries(fulltextInput).length > 1) {
            throw new Error("Can only call one search at any given time");
        }
        const [indexName, indexInput] = Object.entries(fulltextInput)[0];
        const baseParamName = `${varName}_fulltext_${indexName}`;
        const paramPhraseName = `${baseParamName}_phrase`;
        cypherParams[paramPhraseName] = indexInput.phrase;
        cyphers.push((0, graphql_compose_1.dedent)(`
                CALL db.index.fulltext.queryNodes(
                    "${indexName}",
                    $${paramPhraseName}
                ) YIELD node as this, score as score
            `));
        if ((_b = (_a = node.nodeDirective) === null || _a === void 0 ? void 0 : _a.additionalLabels) === null || _b === void 0 ? void 0 : _b.length) {
            node.getLabels(context).forEach((label) => {
                whereStrs.push(`"${label}" IN labels(${varName})`);
            });
        }
        if (node.fulltextDirective) {
            const index = node.fulltextDirective.indexes.find((i) => i.name === indexName);
            let thresholdParamName = baseParamName;
            let threshold;
            if (indexInput.score_EQUAL) {
                thresholdParamName = `${thresholdParamName}_score_EQUAL`;
                threshold = indexInput.score_EQUAL;
            }
            else if (index === null || index === void 0 ? void 0 : index.defaultThreshold) {
                thresholdParamName = `${thresholdParamName}_defaultThreshold`;
                threshold = index.defaultThreshold;
            }
            if (threshold !== undefined) {
                cypherParams[thresholdParamName] = threshold;
                whereStrs.push(`score = ${thresholdParamName}`);
            }
        }
    }
    if (whereInput) {
        const where = (0, create_where_and_params_1.default)({
            whereInput,
            varName,
            node,
            context,
            recursing: true,
        });
        if (where[0]) {
            whereStrs.push(where[0]);
            cypherParams = { ...cypherParams, ...where[1] };
        }
    }
    const whereAuth = (0, create_auth_and_params_1.default)({
        operations: operation,
        entity: node,
        context,
        where: { varName, node },
    });
    if (whereAuth[0]) {
        whereStrs.push(whereAuth[0]);
        cypherParams = { ...cypherParams, ...whereAuth[1] };
    }
    if (whereStrs.length) {
        cyphers.push(`WHERE ${whereStrs.join(" AND ")}`);
    }
    return [cyphers.join("\n"), cypherParams];
}
exports.default = translateTopLevelMatch;
//# sourceMappingURL=translate-top-level-match.js.map