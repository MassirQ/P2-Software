"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_connect_and_params_1 = __importDefault(require("./create-connect-and-params"));
const create_auth_and_params_1 = __importDefault(require("./create-auth-and-params"));
const constants_1 = require("../constants");
const create_set_relationship_properties_and_params_1 = __importDefault(require("./create-set-relationship-properties-and-params"));
const map_to_db_property_1 = __importDefault(require("../utils/map-to-db-property"));
const create_connect_or_create_and_params_1 = require("./connect-or-create/create-connect-or-create-and-params");
const create_relationship_validation_string_1 = __importDefault(require("./create-relationship-validation-string"));
function createCreateAndParams({ input, varName, node, context, withVars, insideDoWhen, includeRelationshipValidation, }) {
    function reducer(res, [key, value]) {
        var _a, _b;
        const varNameKey = `${varName}_${key}`;
        const relationField = node.relationFields.find((x) => key === x.fieldName);
        const primitiveField = node.primitiveFields.find((x) => key === x.fieldName);
        const pointField = node.pointFields.find((x) => key === x.fieldName);
        const dbFieldName = (0, map_to_db_property_1.default)(node, key);
        if (relationField) {
            const refNodes = [];
            if (relationField.union) {
                Object.keys(value).forEach((unionTypeName) => {
                    refNodes.push(context.nodes.find((x) => x.name === unionTypeName));
                });
            }
            else if (relationField.interface) {
                (_b = (_a = relationField.interface) === null || _a === void 0 ? void 0 : _a.implementations) === null || _b === void 0 ? void 0 : _b.forEach((implementationName) => {
                    refNodes.push(context.nodes.find((x) => x.name === implementationName));
                });
            }
            else {
                refNodes.push(context.nodes.find((x) => x.name === relationField.typeMeta.name));
            }
            refNodes.forEach((refNode) => {
                const v = relationField.union ? value[refNode.name] : value;
                const unionTypeName = relationField.union || relationField.interface ? refNode.name : "";
                if (v.create) {
                    const creates = relationField.typeMeta.array ? v.create : [v.create];
                    creates.forEach((create, index) => {
                        var _a;
                        if (relationField.interface && !create.node[refNode.name]) {
                            return;
                        }
                        res.creates.push(`\nWITH ${withVars.join(", ")}`);
                        const baseName = `${varNameKey}${relationField.union ? "_" : ""}${unionTypeName}${index}`;
                        const nodeName = `${baseName}_node`;
                        const propertiesName = `${baseName}_relationship`;
                        const recurse = createCreateAndParams({
                            input: relationField.interface ? create.node[refNode.name] : create.node,
                            context,
                            node: refNode,
                            varName: nodeName,
                            withVars: [...withVars, nodeName],
                            includeRelationshipValidation: false,
                        });
                        res.creates.push(recurse[0]);
                        res.params = { ...res.params, ...recurse[1] };
                        const inStr = relationField.direction === "IN" ? "<-" : "-";
                        const outStr = relationField.direction === "OUT" ? "->" : "-";
                        const relTypeStr = `[${relationField.properties ? propertiesName : ""}:${relationField.type}]`;
                        res.creates.push(`MERGE (${varName})${inStr}${relTypeStr}${outStr}(${nodeName})`);
                        if (relationField.properties) {
                            const relationship = context.relationships.find((x) => x.properties === relationField.properties);
                            const setA = (0, create_set_relationship_properties_and_params_1.default)({
                                properties: (_a = create.edge) !== null && _a !== void 0 ? _a : {},
                                varName: propertiesName,
                                relationship,
                                operation: "CREATE",
                            });
                            res.creates.push(setA[0]);
                            res.params = { ...res.params, ...setA[1] };
                        }
                        const relationshipValidationStr = (0, create_relationship_validation_string_1.default)({
                            node: refNode,
                            context,
                            varName: nodeName,
                        });
                        if (relationshipValidationStr) {
                            res.creates.push(`WITH ${[...withVars, nodeName].join(", ")}`);
                            res.creates.push(relationshipValidationStr);
                        }
                    });
                }
                if (!relationField.interface && v.connect) {
                    const connectAndParams = (0, create_connect_and_params_1.default)({
                        withVars,
                        value: v.connect,
                        varName: `${varNameKey}${relationField.union ? "_" : ""}${unionTypeName}_connect`,
                        parentVar: varName,
                        relationField,
                        context,
                        refNodes: [refNode],
                        labelOverride: unionTypeName,
                        parentNode: node,
                        fromCreate: true,
                    });
                    res.creates.push(connectAndParams[0]);
                    res.params = { ...res.params, ...connectAndParams[1] };
                }
                if (v.connectOrCreate) {
                    const [connectOrCreateQuery, connectOrCreateParams] = (0, create_connect_or_create_and_params_1.createConnectOrCreateAndParams)({
                        input: v.connectOrCreate,
                        varName: `${varNameKey}${relationField.union ? "_" : ""}${unionTypeName}_connectOrCreate`,
                        parentVar: varName,
                        relationField,
                        refNode,
                        context,
                    });
                    res.creates.push(connectOrCreateQuery);
                    res.params = { ...res.params, ...connectOrCreateParams };
                }
            });
            if (relationField.interface && value.connect) {
                const connectAndParams = (0, create_connect_and_params_1.default)({
                    withVars,
                    value: value.connect,
                    varName: `${varNameKey}${relationField.union ? "_" : ""}_connect`,
                    parentVar: varName,
                    relationField,
                    context,
                    refNodes,
                    labelOverride: "",
                    parentNode: node,
                    fromCreate: true,
                });
                res.creates.push(connectAndParams[0]);
                res.params = { ...res.params, ...connectAndParams[1] };
            }
            return res;
        }
        if (primitiveField === null || primitiveField === void 0 ? void 0 : primitiveField.auth) {
            const authAndParams = (0, create_auth_and_params_1.default)({
                entity: primitiveField,
                operations: "CREATE",
                context,
                bind: { parentNode: node, varName, chainStr: varNameKey },
                escapeQuotes: Boolean(insideDoWhen),
            });
            if (authAndParams[0]) {
                if (!res.meta) {
                    res.meta = { authStrs: [] };
                }
                res.meta.authStrs.push(authAndParams[0]);
                res.params = { ...res.params, ...authAndParams[1] };
            }
        }
        if (pointField) {
            if (pointField.typeMeta.array) {
                res.creates.push(`SET ${varName}.${dbFieldName} = [p in $${varNameKey} | point(p)]`);
            }
            else {
                res.creates.push(`SET ${varName}.${dbFieldName} = point($${varNameKey})`);
            }
            res.params[varNameKey] = value;
            return res;
        }
        res.creates.push(`SET ${varName}.${dbFieldName} = $${varNameKey}`);
        res.params[varNameKey] = value;
        return res;
    }
    const labels = node.getLabelString(context);
    const initial = [`CREATE (${varName}${labels})`];
    const timestampedFields = node.temporalFields.filter((x) => { var _a; return ["DateTime", "Time"].includes(x.typeMeta.name) && ((_a = x.timestamps) === null || _a === void 0 ? void 0 : _a.includes("CREATE")); });
    timestampedFields.forEach((field) => {
        // DateTime -> datetime(); Time -> time()
        initial.push(`SET ${varName}.${field.dbPropertyName} = ${field.typeMeta.name.toLowerCase()}()`);
    });
    const autogeneratedIdFields = node.primitiveFields.filter((x) => x.autogenerate);
    autogeneratedIdFields.forEach((f) => {
        initial.push(`SET ${varName}.${f.dbPropertyName} = randomUUID()`);
    });
    // eslint-disable-next-line prefer-const
    let { creates, params, meta } = Object.entries(input).reduce(reducer, {
        creates: initial,
        params: {},
    });
    const forbiddenString = insideDoWhen ? `\\"${constants_1.AUTH_FORBIDDEN_ERROR}\\"` : `"${constants_1.AUTH_FORBIDDEN_ERROR}"`;
    if (node.auth) {
        const bindAndParams = (0, create_auth_and_params_1.default)({
            entity: node,
            operations: "CREATE",
            context,
            bind: { parentNode: node, varName },
            escapeQuotes: Boolean(insideDoWhen),
        });
        if (bindAndParams[0]) {
            creates.push(`WITH ${withVars.join(", ")}`);
            creates.push(`CALL apoc.util.validate(NOT(${bindAndParams[0]}), ${forbiddenString}, [0])`);
            params = { ...params, ...bindAndParams[1] };
        }
    }
    if (meta === null || meta === void 0 ? void 0 : meta.authStrs.length) {
        creates.push(`WITH ${withVars.join(", ")}`);
        creates.push(`CALL apoc.util.validate(NOT(${meta.authStrs.join(" AND ")}), ${forbiddenString}, [0])`);
    }
    if (includeRelationshipValidation) {
        const str = (0, create_relationship_validation_string_1.default)({ node, context, varName });
        if (str) {
            creates.push(`WITH ${withVars.join(", ")}`);
            creates.push(str);
        }
    }
    return [creates.join("\n"), params];
}
exports.default = createCreateAndParams;
//# sourceMappingURL=create-create-and-params.js.map