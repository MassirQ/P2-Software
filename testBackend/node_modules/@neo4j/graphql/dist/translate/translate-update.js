"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_projection_and_params_1 = __importDefault(require("./create-projection-and-params"));
const create_create_and_params_1 = __importDefault(require("./create-create-and-params"));
const create_update_and_params_1 = __importDefault(require("./create-update-and-params"));
const create_connect_and_params_1 = __importDefault(require("./create-connect-and-params"));
const create_disconnect_and_params_1 = __importDefault(require("./create-disconnect-and-params"));
const constants_1 = require("../constants");
const create_delete_and_params_1 = __importDefault(require("./create-delete-and-params"));
const create_connection_and_params_1 = __importDefault(require("./connection/create-connection-and-params"));
const create_set_relationship_properties_and_params_1 = __importDefault(require("./create-set-relationship-properties-and-params"));
const create_interface_projection_and_params_1 = __importDefault(require("./create-interface-projection-and-params"));
const translate_top_level_match_1 = __importDefault(require("./translate-top-level-match"));
const create_connect_or_create_and_params_1 = require("./connect-or-create/create-connect-or-create-and-params");
const create_relationship_validation_string_1 = __importDefault(require("./create-relationship-validation-string"));
function translateUpdate({ node, context }) {
    var _a, _b, _c, _d, _e, _f;
    const { resolveTree } = context;
    const updateInput = resolveTree.args.update;
    const connectInput = resolveTree.args.connect;
    const disconnectInput = resolveTree.args.disconnect;
    const createInput = resolveTree.args.create;
    const deleteInput = resolveTree.args.delete;
    const connectOrCreateInput = resolveTree.args.connectOrCreate;
    const varName = "this";
    let matchAndWhereStr = "";
    let updateStr = "";
    const connectStrs = [];
    const disconnectStrs = [];
    const createStrs = [];
    let deleteStr = "";
    let projAuth = "";
    let projStr = "";
    let cypherParams = {};
    const assumeReconnecting = Boolean(connectInput) && Boolean(disconnectInput);
    const topLevelMatch = (0, translate_top_level_match_1.default)({ node, context, varName, operation: "UPDATE" });
    matchAndWhereStr = topLevelMatch[0];
    cypherParams = { ...cypherParams, ...topLevelMatch[1] };
    const connectionStrs = [];
    const interfaceStrs = [];
    let updateArgs = {};
    const mutationResponse = resolveTree.fieldsByTypeName[node.mutationResponseTypeNames.update];
    const nodeProjection = Object.values(mutationResponse).find((field) => field.name === node.plural);
    if (updateInput) {
        const updateAndParams = (0, create_update_and_params_1.default)({
            context,
            node,
            updateInput,
            varName,
            parentVar: varName,
            withVars: [varName],
            parameterPrefix: `${resolveTree.name}.args.update`,
            includeRelationshipValidation: true,
        });
        [updateStr] = updateAndParams;
        cypherParams = {
            ...cypherParams,
            ...updateAndParams[1],
        };
        updateArgs = {
            ...updateArgs,
            ...(updateStr.includes(resolveTree.name) ? { update: updateInput } : {}),
        };
    }
    if (disconnectInput) {
        Object.entries(disconnectInput).forEach((entry) => {
            var _a, _b;
            const relationField = node.relationFields.find((x) => x.fieldName === entry[0]);
            const refNodes = [];
            if (relationField.union) {
                Object.keys(entry[1]).forEach((unionTypeName) => {
                    refNodes.push(context.nodes.find((x) => x.name === unionTypeName));
                });
            }
            else if (relationField.interface) {
                (_b = (_a = relationField.interface) === null || _a === void 0 ? void 0 : _a.implementations) === null || _b === void 0 ? void 0 : _b.forEach((implementationName) => {
                    refNodes.push(context.nodes.find((x) => x.name === implementationName));
                });
            }
            else {
                refNodes.push(context.nodes.find((x) => x.name === relationField.typeMeta.name));
            }
            if (relationField.interface) {
                const disconnectAndParams = (0, create_disconnect_and_params_1.default)({
                    context,
                    parentVar: varName,
                    refNodes,
                    relationField,
                    value: entry[1],
                    varName: `${varName}_disconnect_${entry[0]}`,
                    withVars: [varName],
                    parentNode: node,
                    parameterPrefix: `${resolveTree.name}.args.disconnect.${entry[0]}`,
                    labelOverride: "",
                });
                disconnectStrs.push(disconnectAndParams[0]);
                cypherParams = { ...cypherParams, ...disconnectAndParams[1] };
            }
            else {
                refNodes.forEach((refNode) => {
                    const disconnectAndParams = (0, create_disconnect_and_params_1.default)({
                        context,
                        parentVar: varName,
                        refNodes: [refNode],
                        relationField,
                        value: relationField.union ? entry[1][refNode.name] : entry[1],
                        varName: `${varName}_disconnect_${entry[0]}${relationField.union ? `_${refNode.name}` : ""}`,
                        withVars: [varName],
                        parentNode: node,
                        parameterPrefix: `${resolveTree.name}.args.disconnect.${entry[0]}${relationField.union ? `.${refNode.name}` : ""}`,
                        labelOverride: relationField.union ? refNode.name : "",
                    });
                    disconnectStrs.push(disconnectAndParams[0]);
                    cypherParams = { ...cypherParams, ...disconnectAndParams[1] };
                });
            }
        });
        updateArgs = {
            ...updateArgs,
            disconnect: disconnectInput,
        };
    }
    if (connectInput) {
        Object.entries(connectInput).forEach((entry) => {
            var _a, _b;
            const relationField = node.relationFields.find((x) => entry[0] === x.fieldName);
            const refNodes = [];
            if (relationField.union) {
                Object.keys(entry[1]).forEach((unionTypeName) => {
                    refNodes.push(context.nodes.find((x) => x.name === unionTypeName));
                });
            }
            else if (relationField.interface) {
                (_b = (_a = relationField.interface) === null || _a === void 0 ? void 0 : _a.implementations) === null || _b === void 0 ? void 0 : _b.forEach((implementationName) => {
                    refNodes.push(context.nodes.find((x) => x.name === implementationName));
                });
            }
            else {
                refNodes.push(context.nodes.find((x) => x.name === relationField.typeMeta.name));
            }
            if (relationField.interface) {
                const connectAndParams = (0, create_connect_and_params_1.default)({
                    context,
                    parentVar: varName,
                    refNodes,
                    relationField,
                    value: entry[1],
                    varName: `${varName}_connect_${entry[0]}`,
                    withVars: [varName],
                    parentNode: node,
                    labelOverride: "",
                    includeRelationshipValidation: !!assumeReconnecting,
                });
                connectStrs.push(connectAndParams[0]);
                cypherParams = { ...cypherParams, ...connectAndParams[1] };
            }
            else {
                refNodes.forEach((refNode) => {
                    const connectAndParams = (0, create_connect_and_params_1.default)({
                        context,
                        parentVar: varName,
                        refNodes: [refNode],
                        relationField,
                        value: relationField.union ? entry[1][refNode.name] : entry[1],
                        varName: `${varName}_connect_${entry[0]}${relationField.union ? `_${refNode.name}` : ""}`,
                        withVars: [varName],
                        parentNode: node,
                        labelOverride: relationField.union ? refNode.name : "",
                    });
                    connectStrs.push(connectAndParams[0]);
                    cypherParams = { ...cypherParams, ...connectAndParams[1] };
                });
            }
        });
    }
    if (createInput) {
        Object.entries(createInput).forEach((entry) => {
            var _a, _b;
            const relationField = node.relationFields.find((x) => entry[0] === x.fieldName);
            const refNodes = [];
            if (relationField.union) {
                Object.keys(entry[1]).forEach((unionTypeName) => {
                    refNodes.push(context.nodes.find((x) => x.name === unionTypeName));
                });
            }
            else if (relationField.interface) {
                (_b = (_a = relationField.interface) === null || _a === void 0 ? void 0 : _a.implementations) === null || _b === void 0 ? void 0 : _b.forEach((implementationName) => {
                    refNodes.push(context.nodes.find((x) => x.name === implementationName));
                });
            }
            else {
                refNodes.push(context.nodes.find((x) => x.name === relationField.typeMeta.name));
            }
            const inStr = relationField.direction === "IN" ? "<-" : "-";
            const outStr = relationField.direction === "OUT" ? "->" : "-";
            refNodes.forEach((refNode) => {
                let v = relationField.union ? entry[1][refNode.name] : entry[1];
                if (relationField.interface) {
                    if (relationField.typeMeta.array) {
                        v = entry[1]
                            .filter((c) => Object.keys(c.node).includes(refNode.name))
                            .map((c) => ({ edge: c.edge, node: c.node[refNode.name] }));
                        if (!v.length) {
                            return;
                        }
                    }
                    else {
                        if (!entry[1].node[refNode.name]) {
                            return;
                        }
                        v = { edge: entry[1].edge, node: entry[1].node[refNode.name] };
                    }
                }
                const creates = relationField.typeMeta.array ? v : [v];
                creates.forEach((create, index) => {
                    var _a;
                    const baseName = `${varName}_create_${entry[0]}${relationField.union || relationField.interface ? `_${refNode.name}` : ""}${index}`;
                    const nodeName = `${baseName}_node${relationField.interface ? `_${refNode.name}` : ""}`;
                    const propertiesName = `${baseName}_relationship`;
                    const relTypeStr = `[${relationField.properties ? propertiesName : ""}:${relationField.type}]`;
                    const createAndParams = (0, create_create_and_params_1.default)({
                        context,
                        node: refNode,
                        input: create.node,
                        varName: nodeName,
                        withVars: [varName, nodeName],
                        includeRelationshipValidation: false,
                    });
                    createStrs.push(createAndParams[0]);
                    cypherParams = { ...cypherParams, ...createAndParams[1] };
                    createStrs.push(`MERGE (${varName})${inStr}${relTypeStr}${outStr}(${nodeName})`);
                    if (relationField.properties) {
                        const relationship = context.relationships.find((x) => x.properties === relationField.properties);
                        const setA = (0, create_set_relationship_properties_and_params_1.default)({
                            properties: (_a = create.edge) !== null && _a !== void 0 ? _a : {},
                            varName: propertiesName,
                            relationship,
                            operation: "CREATE",
                        });
                        createStrs.push(setA[0]);
                        cypherParams = { ...cypherParams, ...setA[1] };
                    }
                });
            });
        });
    }
    if (deleteInput) {
        const deleteAndParams = (0, create_delete_and_params_1.default)({
            context,
            node,
            deleteInput,
            varName: `${varName}_delete`,
            parentVar: varName,
            withVars: [varName],
            parameterPrefix: `${resolveTree.name}.args.delete`,
        });
        [deleteStr] = deleteAndParams;
        cypherParams = {
            ...cypherParams,
            ...deleteAndParams[1],
        };
        updateArgs = {
            ...updateArgs,
            ...(deleteStr.includes(resolveTree.name) ? { delete: deleteInput } : {}),
        };
    }
    if (connectOrCreateInput) {
        Object.entries(connectOrCreateInput).forEach(([key, input]) => {
            var _a, _b;
            const relationField = node.relationFields.find((x) => key === x.fieldName);
            const refNodes = [];
            if (relationField.union) {
                Object.keys(input).forEach((unionTypeName) => {
                    refNodes.push(context.nodes.find((x) => x.name === unionTypeName));
                });
            }
            else if (relationField.interface) {
                (_b = (_a = relationField.interface) === null || _a === void 0 ? void 0 : _a.implementations) === null || _b === void 0 ? void 0 : _b.forEach((implementationName) => {
                    refNodes.push(context.nodes.find((x) => x.name === implementationName));
                });
            }
            else {
                refNodes.push(context.nodes.find((x) => x.name === relationField.typeMeta.name));
            }
            refNodes.forEach((refNode) => {
                const connectAndParams = (0, create_connect_or_create_and_params_1.createConnectOrCreateAndParams)({
                    input: input[refNode.name] || input,
                    varName: `${varName}_connectOrCreate_${key}${relationField.union ? `_${refNode.name}` : ""}`,
                    parentVar: varName,
                    relationField,
                    refNode,
                    context,
                });
                connectStrs.push(connectAndParams[0]);
                cypherParams = { ...cypherParams, ...connectAndParams[1] };
            });
        });
    }
    if (nodeProjection === null || nodeProjection === void 0 ? void 0 : nodeProjection.fieldsByTypeName) {
        const projection = (0, create_projection_and_params_1.default)({
            node,
            context,
            resolveTree: nodeProjection,
            varName,
        });
        [projStr] = projection;
        cypherParams = { ...cypherParams, ...projection[1] };
        if ((_b = (_a = projection[2]) === null || _a === void 0 ? void 0 : _a.authValidateStrs) === null || _b === void 0 ? void 0 : _b.length) {
            projAuth = `CALL apoc.util.validate(NOT(${projection[2].authValidateStrs.join(" AND ")}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`;
        }
        if ((_d = (_c = projection[2]) === null || _c === void 0 ? void 0 : _c.connectionFields) === null || _d === void 0 ? void 0 : _d.length) {
            projection[2].connectionFields.forEach((connectionResolveTree) => {
                const connectionField = node.connectionFields.find((x) => x.fieldName === connectionResolveTree.name);
                const connection = (0, create_connection_and_params_1.default)({
                    resolveTree: connectionResolveTree,
                    field: connectionField,
                    context,
                    nodeVariable: varName,
                });
                connectionStrs.push(connection[0]);
                cypherParams = { ...cypherParams, ...connection[1] };
            });
        }
        if ((_f = (_e = projection[2]) === null || _e === void 0 ? void 0 : _e.interfaceFields) === null || _f === void 0 ? void 0 : _f.length) {
            projection[2].interfaceFields.forEach((interfaceResolveTree) => {
                const relationshipField = node.relationFields.find((x) => x.fieldName === interfaceResolveTree.name);
                const interfaceProjection = (0, create_interface_projection_and_params_1.default)({
                    resolveTree: interfaceResolveTree,
                    field: relationshipField,
                    context,
                    node,
                    nodeVariable: varName,
                });
                interfaceStrs.push(interfaceProjection.cypher);
                cypherParams = { ...cypherParams, ...interfaceProjection.params };
            });
        }
    }
    const returnStatement = nodeProjection
        ? `RETURN ${varName} ${projStr} AS ${varName}`
        : `RETURN 'Query cannot conclude with CALL'`;
    const relationshipValidationStr = !updateInput ? (0, create_relationship_validation_string_1.default)({ node, context, varName }) : "";
    const cypher = [
        matchAndWhereStr,
        updateStr,
        connectStrs.join("\n"),
        disconnectStrs.join("\n"),
        createStrs.join("\n"),
        deleteStr,
        ...(connectionStrs.length || projAuth ? [`WITH ${varName}`] : []),
        ...(projAuth ? [projAuth] : []),
        ...(relationshipValidationStr ? [`WITH ${varName}`, relationshipValidationStr] : []),
        ...connectionStrs,
        ...interfaceStrs,
        returnStatement,
    ];
    return [
        cypher.filter(Boolean).join("\n"),
        { ...cypherParams, ...(Object.keys(updateArgs).length ? { [resolveTree.name]: { args: updateArgs } } : {}) },
    ];
}
exports.default = translateUpdate;
//# sourceMappingURL=translate-update.js.map