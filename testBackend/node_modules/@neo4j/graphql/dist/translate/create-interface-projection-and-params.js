"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const filter_interface_nodes_1 = __importDefault(require("../utils/filter-interface-nodes"));
const create_connection_and_params_1 = __importDefault(require("./connection/create-connection-and-params"));
const create_auth_and_params_1 = __importDefault(require("./create-auth-and-params"));
const create_projection_and_params_1 = __importDefault(require("./create-projection-and-params"));
const get_relationship_direction_1 = require("./cypher-builder/get-relationship-direction");
const create_element_where_and_params_1 = __importDefault(require("./where/create-element-where-and-params"));
function createInterfaceProjectionAndParams({ resolveTree, field, context, node, nodeVariable, parameterPrefix, }) {
    let globalParams = {};
    let params = {};
    const relTypeStr = `[:${field.type}]`;
    const { inStr, outStr } = (0, get_relationship_direction_1.getRelationshipDirection)(field, resolveTree.args);
    const whereInput = resolveTree.args.where;
    const referenceNodes = context.nodes.filter((x) => { var _a, _b; return ((_b = (_a = field.interface) === null || _a === void 0 ? void 0 : _a.implementations) === null || _b === void 0 ? void 0 : _b.includes(x.name)) && (0, filter_interface_nodes_1.default)({ node: x, whereInput }); });
    let whereArgs = {};
    const subqueries = referenceNodes.map((refNode) => {
        var _a, _b, _c, _d, _e;
        const param = `${nodeVariable}_${refNode.name}`;
        const subquery = [
            `WITH ${nodeVariable}`,
            `MATCH (${nodeVariable})${inStr}${relTypeStr}${outStr}(${param}:${refNode.name})`,
        ];
        const allowAndParams = (0, create_auth_and_params_1.default)({
            operations: "READ",
            entity: refNode,
            context,
            allow: {
                parentNode: refNode,
                varName: param,
            },
        });
        if (allowAndParams[0]) {
            globalParams = { ...globalParams, ...allowAndParams[1] };
            subquery.push(`CALL apoc.util.validate(NOT(${allowAndParams[0]}), "${constants_1.AUTH_FORBIDDEN_ERROR}", [0])`);
        }
        const whereStrs = [];
        if (resolveTree.args.where) {
            // For root filters
            const rootNodeWhereAndParams = (0, create_element_where_and_params_1.default)({
                whereInput: {
                    ...Object.entries(whereInput).reduce((args, [k, v]) => {
                        var _a, _b;
                        if (k !== "_on") {
                            // If this where key is also inside _on for this implementation, use the one in _on instead
                            if ((_b = (_a = whereInput === null || whereInput === void 0 ? void 0 : whereInput._on) === null || _a === void 0 ? void 0 : _a[refNode.name]) === null || _b === void 0 ? void 0 : _b[k]) {
                                return args;
                            }
                            return { ...args, [k]: v };
                        }
                        return args;
                    }, {}),
                },
                context,
                element: refNode,
                varName: param,
                parameterPrefix: `${parameterPrefix ? `${parameterPrefix}.` : `${nodeVariable}_`}${resolveTree.alias}.args.where`,
            });
            if (rootNodeWhereAndParams[0]) {
                whereStrs.push(rootNodeWhereAndParams[0]);
                whereArgs = { ...whereArgs, ...rootNodeWhereAndParams[1] };
            }
            // For _on filters
            if ((_a = whereInput === null || whereInput === void 0 ? void 0 : whereInput._on) === null || _a === void 0 ? void 0 : _a[refNode.name]) {
                const onTypeNodeWhereAndParams = (0, create_element_where_and_params_1.default)({
                    whereInput: {
                        ...Object.entries(whereInput).reduce((args, [k, v]) => {
                            if (k !== "_on") {
                                return { ...args, [k]: v };
                            }
                            if (Object.prototype.hasOwnProperty.call(v, refNode.name)) {
                                return { ...args, ...v[refNode.name] };
                            }
                            return args;
                        }, {}),
                    },
                    context,
                    element: refNode,
                    varName: param,
                    parameterPrefix: `${parameterPrefix ? `${parameterPrefix}.` : `${nodeVariable}_`}${resolveTree.alias}.args.where._on.${refNode.name}`,
                });
                if (onTypeNodeWhereAndParams[0]) {
                    whereStrs.push(onTypeNodeWhereAndParams[0]);
                    if (whereArgs._on) {
                        whereArgs._on[refNode.name] = onTypeNodeWhereAndParams[1];
                    }
                    else {
                        whereArgs._on = { [refNode.name]: onTypeNodeWhereAndParams[1] };
                    }
                }
            }
        }
        const whereAuth = (0, create_auth_and_params_1.default)({
            operations: "READ",
            entity: refNode,
            context,
            where: { varName: param, node: refNode },
        });
        if (whereAuth[0]) {
            whereStrs.push(whereAuth[0]);
            globalParams = { ...globalParams, ...whereAuth[1] };
        }
        if (whereStrs.length) {
            subquery.push(`WHERE ${whereStrs.join(" AND ")}`);
        }
        const recurse = (0, create_projection_and_params_1.default)({
            resolveTree,
            node: refNode,
            context,
            varName: param,
            literalElements: true,
            resolveType: true,
        });
        if ((_c = (_b = recurse[2]) === null || _b === void 0 ? void 0 : _b.connectionFields) === null || _c === void 0 ? void 0 : _c.length) {
            recurse[2].connectionFields.forEach((connectionResolveTree) => {
                const connectionField = refNode.connectionFields.find((x) => x.fieldName === connectionResolveTree.name);
                const connection = (0, create_connection_and_params_1.default)({
                    resolveTree: connectionResolveTree,
                    field: connectionField,
                    context,
                    nodeVariable: param,
                });
                subquery.push(connection[0]);
                params = { ...params, ...connection[1] };
            });
        }
        if ((_e = (_d = recurse[2]) === null || _d === void 0 ? void 0 : _d.interfaceFields) === null || _e === void 0 ? void 0 : _e.length) {
            recurse[2].interfaceFields.forEach((interfaceResolveTree) => {
                const relationshipField = refNode.relationFields.find((x) => x.fieldName === interfaceResolveTree.name);
                const interfaceProjection = createInterfaceProjectionAndParams({
                    resolveTree: interfaceResolveTree,
                    field: relationshipField,
                    context,
                    node: refNode,
                    nodeVariable: param,
                });
                subquery.push(interfaceProjection.cypher);
                params = { ...params, ...interfaceProjection.params };
            });
        }
        subquery.push(`RETURN ${recurse[0]} AS ${field.fieldName}`);
        globalParams = {
            ...globalParams,
            ...recurse[1],
        };
        return subquery.join("\n");
    });
    const interfaceProjection = [`WITH ${nodeVariable}`, "CALL {", subqueries.join("\nUNION\n"), "}"];
    if (Object.keys(whereArgs).length) {
        params.args = { where: whereArgs };
    }
    return {
        cypher: interfaceProjection.join("\n"),
        params: {
            ...globalParams,
            ...(Object.keys(params).length ? { [`${nodeVariable}_${resolveTree.alias}`]: params } : {}),
        },
    };
}
exports.default = createInterfaceProjectionAndParams;
//# sourceMappingURL=create-interface-projection-and-params.js.map