"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildRelationshipStatement = void 0;
const build_node_statement_1 = require("./build-node-statement");
const utils_1 = require("./utils");
const join_statements_1 = require("./join-statements");
function buildRelationshipStatement({ sourceNode, targetNode, context, relationship, directed = true, }) {
    const relationshipStatement = getRelationshipSubStatement(relationship, directed);
    const sourceNodeStatement = (0, build_node_statement_1.buildNodeStatement)({
        context,
        ...sourceNode,
    });
    const targetNodeStatement = (0, build_node_statement_1.buildNodeStatement)({
        context,
        ...targetNode,
    });
    return (0, join_statements_1.joinStatements)([sourceNodeStatement, relationshipStatement, targetNodeStatement], "");
}
exports.buildRelationshipStatement = buildRelationshipStatement;
function getRelationshipSubStatement({ relationField, varName = "", parameters }, directed) {
    let leftConnection = relationField.direction === "IN" ? "<-" : "-";
    let rightConnection = relationField.direction === "OUT" ? "->" : "-";
    if (directed === false) {
        leftConnection = "-";
        rightConnection = "-";
    }
    const relationshipLabel = relationField.type ? `:${relationField.type}` : "";
    const [relParamsQuery, relParams] = serializeRelationParameters(varName, parameters);
    const relTypeStr = `[${varName || ""}${relationshipLabel}${(0, utils_1.padLeft)(relParamsQuery)}]`;
    return [`${leftConnection}${relTypeStr}${rightConnection}`, relParams];
}
function serializeRelationParameters(varName, parameters) {
    return (0, utils_1.serializeParameters)(`${varName}_relationship`, parameters);
}
//# sourceMappingURL=build-relationship-statement.js.map