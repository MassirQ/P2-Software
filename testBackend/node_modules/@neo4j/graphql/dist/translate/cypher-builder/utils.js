"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.padLeft = exports.serializeParameters = exports.generateParameterKey = void 0;
const stringify_object_1 = require("../utils/stringify-object");
/** Generates a string to be used as parameter key */
function generateParameterKey(prefix, key) {
    return `${prefix}_${key}`;
}
exports.generateParameterKey = generateParameterKey;
/** Serializes an object and splits between the serialized statement and params */
function serializeParameters(keyprefix, parameters) {
    if (!parameters)
        return ["", {}];
    const cypherParameters = {};
    const nodeParameters = {};
    for (const [key, value] of Object.entries(parameters)) {
        const paramKey = generateParameterKey(keyprefix, key);
        cypherParameters[paramKey] = value;
        nodeParameters[key] = `$${paramKey}`;
    }
    return [(0, stringify_object_1.stringifyObject)(nodeParameters), cypherParameters];
}
exports.serializeParameters = serializeParameters;
/** Adds spaces to the left of the string, returns empty string is variable is undefined or empty string */
function padLeft(str) {
    if (!str)
        return "";
    return ` ${str}`;
}
exports.padLeft = padLeft;
//# sourceMappingURL=utils.js.map