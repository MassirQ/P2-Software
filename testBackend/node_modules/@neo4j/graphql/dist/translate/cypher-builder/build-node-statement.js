"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildNodeStatement = void 0;
const classes_1 = require("../../classes");
const utils_1 = require("./utils");
function buildNodeStatement({ varName = "", node, context, parameters }) {
    if (!node && !varName) {
        throw new classes_1.Neo4jGraphQLCypherBuilderError("Cannot build node statement without node nor varName");
    }
    const labels = node ? node.getLabelString(context) : "";
    const [parametersQuery, parsedParameters] = parseNodeParameters(varName, parameters);
    return [`(${varName}${labels}${(0, utils_1.padLeft)(parametersQuery)})`, parsedParameters];
}
exports.buildNodeStatement = buildNodeStatement;
function parseNodeParameters(nodeVar, parameters) {
    if (!nodeVar && parameters)
        throw new Error("noveVar not defined with parameters");
    return (0, utils_1.serializeParameters)(`${nodeVar}_node`, parameters);
}
//# sourceMappingURL=build-node-statement.js.map