"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_element_where_and_params_1 = __importDefault(require("./create-element-where-and-params"));
function createConnectionWhereAndParams({ whereInput, context, node, nodeVariable, relationship, relationshipVariable, parameterPrefix, }) {
    const reduced = Object.entries(whereInput).reduce((res, [k, v]) => {
        var _a;
        if (["AND", "OR"].includes(k)) {
            const innerClauses = [];
            const innerParams = [];
            v.forEach((o, i) => {
                const or = createConnectionWhereAndParams({
                    whereInput: o,
                    node,
                    nodeVariable,
                    relationship,
                    relationshipVariable,
                    context,
                    parameterPrefix: `${parameterPrefix}.${k}[${i}]`,
                });
                innerClauses.push(`${or[0]}`);
                innerParams.push(or[1]);
            });
            const whereStrs = [...res.whereStrs, `(${innerClauses.filter((clause) => !!clause).join(` ${k} `)})`];
            const params = { ...res.params, [k]: innerParams };
            return { whereStrs, params };
        }
        if (k.startsWith("edge")) {
            const relationshipWhere = (0, create_element_where_and_params_1.default)({
                whereInput: v,
                element: relationship,
                varName: relationshipVariable,
                context,
                parameterPrefix: `${parameterPrefix}.${k}`,
            });
            const whereStrs = [
                ...res.whereStrs,
                k === "edge_NOT" ? `(NOT ${relationshipWhere[0]})` : relationshipWhere[0],
            ];
            const params = { ...res.params, [k]: relationshipWhere[1] };
            return { whereStrs, params };
        }
        if (k.startsWith("node") || k.startsWith(node.name)) {
            let { whereStrs } = res;
            let { params } = res;
            if (Object.keys(v).length === 1 && v._on && !Object.prototype.hasOwnProperty.call(v._on, node.name)) {
                throw new Error("_on is used as the only argument and node is not present within");
            }
            const rootNodeWhere = (0, create_element_where_and_params_1.default)({
                whereInput: {
                    ...Object.entries(v).reduce((args, [key, value]) => {
                        var _a, _b;
                        if (key !== "_on") {
                            if ((_b = (_a = v === null || v === void 0 ? void 0 : v._on) === null || _a === void 0 ? void 0 : _a[node.name]) === null || _b === void 0 ? void 0 : _b[key]) {
                                return args;
                            }
                            return { ...args, [key]: value };
                        }
                        return args;
                    }, {}),
                },
                element: node,
                varName: nodeVariable,
                context,
                parameterPrefix: `${parameterPrefix}.${k}`,
            });
            if (rootNodeWhere[0]) {
                whereStrs = [...whereStrs, k.endsWith("_NOT") ? `(NOT ${rootNodeWhere[0]})` : rootNodeWhere[0]];
                params = { ...params, [k]: rootNodeWhere[1] };
                res = { whereStrs, params };
            }
            if ((_a = v === null || v === void 0 ? void 0 : v._on) === null || _a === void 0 ? void 0 : _a[node.name]) {
                const onTypeNodeWhere = (0, create_element_where_and_params_1.default)({
                    whereInput: {
                        ...Object.entries(v).reduce((args, [key, value]) => {
                            if (key !== "_on") {
                                return { ...args, [key]: value };
                            }
                            if (Object.prototype.hasOwnProperty.call(value, node.name)) {
                                return { ...args, ...value[node.name] };
                            }
                            return args;
                        }, {}),
                    },
                    element: node,
                    varName: nodeVariable,
                    context,
                    parameterPrefix: `${parameterPrefix}.${k}._on.${node.name}`,
                });
                whereStrs = [...whereStrs, k.endsWith("_NOT") ? `(NOT ${onTypeNodeWhere[0]})` : onTypeNodeWhere[0]];
                params = { ...params, [k]: onTypeNodeWhere[1] };
                res = { whereStrs, params };
            }
        }
        return res;
    }, { whereStrs: [], params: {} });
    return [reduced.whereStrs.join(" AND "), reduced.params];
}
exports.default = createConnectionWhereAndParams;
//# sourceMappingURL=create-connection-where-and-params.js.map